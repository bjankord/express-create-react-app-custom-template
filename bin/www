#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server/app');
const path = require('path');
const http = require('http');
const chokidar = require('chokidar');
const socket = require('socket.io');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Setup file watcher to emit event to the client on './src' file changes
 * Used to live-reload the web page while running npm start script
 */
if (process.env.NODE_ENV !== 'production') {
  let io = socket(server)
  io.on('connection', socket => {
    const buildDir = path.join(__dirname, '..', 'src');
    const watcher = chokidar.watch(buildDir);

    const watchHandler = () => {
      socket.emit("files changed");
    };

    watcher.on('ready', () => {
      watcher.on('add', watchHandler);
      watcher.on('change', watchHandler);
    });

    socket.on('disconnect', () => {
      watcher.close();
    });
  });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
